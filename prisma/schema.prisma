generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum TipoPessoa {
  FISICA
  JURIDICA
}

enum TipoContato {
  EMAIL
  TELEFONE_FIXO
  CELULAR
}

enum Situacao {
  ATIVO
  INATIVO
}

enum DiaSemana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

// ========== TYPES ==========
type Endereco {
  logradouro String
  cep        String
  cidade     String
  uf         String
}

type Contato {
  tipo  TipoContato
  valor String
}

type Responsavel {
  nome     String
  contatos Contato[]
}

type Horario {
  local          String
  diasSemana     DiaSemana[]
  horarioEntrada String
  horarioSaida   String
}

type ControleAcesso {
  senha             String
  impressaoDigital1 String? // Armazenada como hash/base64
  impressaoDigital2 String? // Armazenada como hash/base64
}

// ========== MODELS ==========
model Pessoa {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  codigo   String    @unique
  tipo     String // FISICA ou JURIDICA
  nome1    String
  nome2    String?
  doc1     String    @unique // CPF ou CNPJ
  doc2     String?
  dtNsc    DateTime?
  situacao String    @default("ATIVO")

  // ‚úÖ Campos JSON (n√£o s√£o modelos relacionados)
  enderecos Json[] @default([])
  contatos  Json[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Rela√ß√µes
  alunos       Aluno[]
  funcionarios Funcionario[]

  @@map("pessoas")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  email     String    @unique
  dtNasc    DateTime?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Aluno {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Refer√™ncia √† Pessoa (relacionamento)
  pessoaId  String @db.ObjectId
  matricula String @unique
  pessoa    Pessoa @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  // Dados espec√≠ficos do Aluno
  vldExameMedico DateTime? @db.Date
  vldAvaliacao   DateTime? @db.Date
  objetivo       String?
  profissao      String?
  empresa        String?

  // Respons√°vel
  responsavel   Responsavel?
  matriculas    Matricula[]
  contasReceber ContaReceber[]
  // Lista de Hor√°rios
  frequencias   Frequencia[]
  horarios      Horario[]

  // Controle de Acesso
  controleAcesso ControleAcesso

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pessoaId])
}

model Frequencia {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  alunoId       String         @db.ObjectId
  data          DateTime
  horarioInicio DateTime
  horarioFim    DateTime?
  presente      Boolean        @default(false)
  observacao    String?
  tipo          TipoFrequencia @default(MANUAL)
  validadaPor   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  aluno Aluno @relation(fields: [alunoId], references: [id], onDelete: Cascade)

  @@index([alunoId, data])
  @@index([data])
  @@map("frequencias")
}

enum TipoFrequencia {
  MANUAL
  AUTOMATICA
  IMPORTADA
}

model Local {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  status    String   @default("ATIVO") // ATIVO, INATIVO
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locais")
}

enum Periodicidade {
  MENSAL
  BIMESTRAL
  TRIMESTRAL
  QUADRIMESTRAL
  SEMESTRAL
  ANUAL
  MESES // Personalizado: X meses
  DIAS // Personalizado: X dias
}

enum TipoCobranca {
  RECORRENTE // Gera cobran√ßa todo m√™s/per√≠odo
  UNICA // Gera apenas 1 cobran√ßa
}

model Plano {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  codigo        String        @unique
  nome          String
  periodicidade Periodicidade
  numeroMeses   Int?
  numeroDias    Int?

  // ‚úÖ NOVO CAMPO
  tipoCobranca TipoCobranca @default(RECORRENTE)

  valorMensalidade Float
  status           String  @default("ATIVO")
  descricao        String?

  matriculas    Matricula[]
  contasReceber ContaReceber[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("planos")
}

model Funcao {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  funcao    String   @unique
  status    String   @default("ATIVO")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  funcionarios Funcionario[]

  @@map("funcoes")
}

model Desconto {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  descricao  String
  tipo       String // PERCENTUAL ou MONETARIO
  valor      Float
  status     String      @default("ATIVO")
  matriculas Matricula[] // Rela√ß√£o reversa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("descontos")
}

// Adicione este model ao seu schema.prisma

model Visitante {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Dados cadastrais
  nome           String
  endereco       String?
  bairro         String?
  cidade         String?
  uf             String?
  cep            String?
  telefone       String?
  celular        String?
  email          String?
  sexo           String? // MASCULINO, FEMININO
  dataNascimento DateTime?
  observacoes    String?

  // Dados da visita
  dataVisita DateTime

  // ‚úÖ Relacionamento com Funcion√°rio
  funcionarioId String?      @db.ObjectId
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([funcionarioId])
  @@map("visitantes")
}

model Funcionario {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  pessoaId String @unique @db.ObjectId
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id])

  matricula    String    @unique
  funcaoId     String    @db.ObjectId
  funcao       Funcao    @relation(fields: [funcaoId], references: [id])
  dataAdmissao DateTime
  dataDemissao DateTime?
  salario      Float?
  situacao     String    @default("ATIVO")

  visitantes Visitante[] // Rela√ß√£o reversa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([funcaoId])
  @@map("funcionarios")
}

model Turma {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  nome        String  @unique
  sexo        String // MASCULINO, FEMININO, AMBOS
  observacoes String?

  // Lista de hor√°rios com local
  horarios Json[] // Array de { localId, local, diasSemana, horaEntrada, horaSaida }

  // Lista de instrutores
  instrutores Json[] // Array de { funcionarioId, nome }

  status     String      @default("ATIVO")
  matriculas Matricula[] // Rela√ß√£o reversa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("turmas")
}

model Matricula {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  codigo String @unique // Ex: "M00001"

  // Relacionamentos
  alunoId String @db.ObjectId
  aluno   Aluno  @relation(fields: [alunoId], references: [id])

  planoId String @db.ObjectId
  plano   Plano  @relation(fields: [planoId], references: [id])

  turmaId String? @db.ObjectId // Opcional
  turma   Turma?  @relation(fields: [turmaId], references: [id])

  descontoId String?   @db.ObjectId // Opcional
  desconto   Desconto? @relation(fields: [descontoId], references: [id])

  // üÜï NOVO: Relacionamento com contas a receber
  contasReceber ContaReceber[]

  // Datas
  dataInicio    DateTime
  dataFim       DateTime
  diaVencimento Int? // 1-31 (para planos mensais)

  // Valores
  valorMatricula Float // Valor original do plano
  valorDesconto  Float @default(0)
  valorFinal     Float // valorMatricula - valorDesconto

  // Controle
  situacao         String  @default("ATIVA") // ATIVA | INATIVA | SUSPENSA | CANCELADA
  motivoInativacao String? // Ex: "Inadimpl√™ncia", "Pedido do aluno"

  // Controle Financeiro
  formaPagamento       String? // "DINHEIRO" | "PIX" | "CARTAO" | "BOLETO"
  parcelamento         Int?      @default(1) // N√∫mero de parcelas
  ultimaCobrancaGerada DateTime? // Data da √∫ltima cobran√ßa gerada
  proximaCobrancaData  DateTime? // Pr√≥xima data prevista

  // Observa√ß√µes
  observacoes String?

  // Auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("matriculas")
}

model ContaReceber {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  numero String @unique

  alunoId String @db.ObjectId
  aluno   Aluno  @relation(fields: [alunoId], references: [id], onDelete: Cascade)

  planoId String? @db.ObjectId
  plano   Plano?  @relation(fields: [planoId], references: [id], onDelete: SetNull)

  descontoId String? @db.ObjectId

  // üÜï NOVO: Relacionamento com matr√≠cula
  matriculaId String?    @db.ObjectId
  matricula   Matricula? @relation(fields: [matriculaId], references: [id], onDelete: SetNull)

  // Valores
  valorOriginal Float
  valorDesconto Float @default(0)
  valorFinal    Float
  valorPago     Float @default(0)
  valorRestante Float

  // Datas
  dataEmissao    DateTime  @default(now())
  dataVencimento DateTime
  dataPagamento  DateTime?

  // Status
  status String @default("PENDENTE") // PENDENTE, PAGO, VENCIDO, CANCELADO

  // Informa√ß√µes adicionais
  observacoes    String?
  formaPagamento String? // DINHEIRO, CARTAO_CREDITO, CARTAO_DEBITO, PIX, BOLETO

  // Controle de parcelas
  numeroParcela Int?
  totalParcelas Int?

  // Auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([alunoId])
  @@index([planoId])
  @@index([matriculaId]) // üÜï NOVO: √çndice para matriculaId
  @@index([alunoId, planoId])
  @@index([alunoId, planoId, matriculaId]) // üÜï NOVO: √çndice composto
  @@index([status])
  @@map("contas_receber")
}

model Caixa {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  numero String @unique

  // Dados de abertura
  dataAbertura    DateTime
  horaAbertura    String
  valorAbertura   Float
  usuarioAbertura String

  // Dados de fechamento
  dataFechamento    DateTime?
  horaFechamento    String?
  valorFechamento   Float?
  usuarioFechamento String?

  // Valores
  totalEntradas Float  @default(0)
  totalSaidas   Float  @default(0)
  saldoFinal    Float?

  // Status
  status String @default("ABERTO") // ABERTO, FECHADO

  // Movimentos (JSON) - Estrutura atualizada
  movimentos Json[] @default([])
  // Estrutura de cada movimento:
  // {
  //   id: string,
  //   tipo: "ENTRADA" | "SAIDA",
  //   valor: number,
  //   descricao: string,
  //   formaPagamento: string,
  //   contaReceberId?: string,  // Para recebimentos
  //   contaPagarId?: string,    // Para pagamentos
  //   categoria?: string,        // Categoria da despesa/receita
  //   dataHora: string
  // }

  // Observa√ß√µes
  observacoes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContaPagar {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  numero String @unique // N√∫mero sequencial da conta

  // Relacionamentos
  fornecedorId  String? @db.ObjectId // Pode ser um fornecedor cadastrado
  funcionarioId String? @db.ObjectId // Ou um funcion√°rio (sal√°rios)

  // Dados do fornecedor (se n√£o cadastrado)
  fornecedorNome String?
  fornecedorDoc  String?

  // Categoria/Tipo
  categoria String // FORNECEDOR, SALARIO, ALUGUEL, ENERGIA, AGUA, TELEFONE, INTERNET, EQUIPAMENTO, MANUTENCAO, OUTROS

  // Valores
  valorOriginal Float
  valorDesconto Float @default(0)
  valorJuros    Float @default(0)
  valorMulta    Float @default(0)
  valorFinal    Float
  valorPago     Float @default(0)
  valorRestante Float

  // Datas
  dataEmissao    DateTime  @default(now())
  dataVencimento DateTime
  dataPagamento  DateTime?

  // Status
  status String @default("PENDENTE") // PENDENTE, PAGO, VENCIDO, CANCELADO

  // Informa√ß√µes adicionais
  descricao      String
  observacoes    String?
  formaPagamento String? // DINHEIRO, TRANSFERENCIA, BOLETO, CHEQUE, CARTAO
  documento      String? // N√∫mero da nota fiscal, recibo, etc

  // Controle de parcelas
  numeroParcela Int?
  totalParcelas Int?

  // Anexos (URLs ou base64)
  anexos Json[] @default([])

  // Auditoria
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Adicione ao seu schema.prisma

model Empresa {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  codigo             String  @unique
  razaoSocial        String
  nomeFantasia       String?
  cnpj               String  @unique
  inscricaoEstadual  String?
  inscricaoMunicipal String?

  endereco Json? // { logradouro, numero, complemento, bairro, cidade, estado, cep }
  contatos Json? // [{ tipo: 'EMAIL' | 'TELEFONE' | 'CELULAR', valor, principal }]

  responsavel String?
  email       String?
  site        String?

  situacao String @default("ATIVO") // ATIVO, INATIVO, BLOQUEADO

  // Relacionamentos
  licencas Licenca[]
  usuarios Usuario[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("empresas")
}

model Licenca {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  empresaId String  @db.ObjectId
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  chave String @unique // Chave de ativa√ß√£o UUID
  tipo  String // TRIAL, MENSAL, ANUAL, VITALICIA

  dataInicio    DateTime
  dataExpiracao DateTime

  maxUsuarios Int @default(5)
  maxAlunos   Int @default(100)

  funcionalidades Json // Array de m√≥dulos liberados: ['ALUNOS', 'FINANCEIRO', 'TREINOS']

  situacao String @default("ATIVA") // ATIVA, EXPIRADA, CANCELADA, SUSPENSA

  observacoes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("licencas")
}

model Usuario {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  empresaId String  @db.ObjectId
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  nomeUsuario String @unique // Username para login
  nome        String
  email       String @unique
  senha       String // Hash bcrypt

  perfil String @default("USUARIO") // ADMIN, GERENTE, USUARIO, INSTRUTOR

  permissoes Json @default("{\"modulos\":{},\"acoes_especiais\":[]}")

  foto     String?
  telefone String?

  situacao String @default("ATIVO") // ATIVO, INATIVO, BLOQUEADO

  ultimoAcesso DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuarios")
}
